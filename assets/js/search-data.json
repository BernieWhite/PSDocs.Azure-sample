{"0": {
    "doc": "v1",
    "title": "Container Registry",
    "content": ". Create or update a Container Registry. ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/acr/acr_v1/#container-registry",
    "relUrl": "/docs/templates/acr/acr_v1/#container-registry"
  },"1": {
    "doc": "v1",
    "title": "Parameters",
    "content": "| Parameter name | Description | . | registryName | Required. The name of the container registry. | . | location | Optional. The location to deploy the container registry. | . | registrySku | Optional. The container registry SKU. | . | tags | Optional. Tags to apply to the resource. | . registryName . Required. The name of the container registry. location . Optional. The location to deploy the container registry. | Default value: [resourceGroup().location] | . registrySku . Optional. The container registry SKU. | Default value: Basic . | Allowed values: Basic, Standard, Premium . | . tags . Optional. Tags to apply to the resource. ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/acr/acr_v1/#parameters",
    "relUrl": "/docs/templates/acr/acr_v1/#parameters"
  },"2": {
    "doc": "v1",
    "title": "Snippets",
    "content": "Parameter file . { \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"template\": \"templates/acr/v1/template.json\" }, \"parameters\": { \"registryName\": { \"value\": \"&lt;name&gt;\" }, \"registrySku\": { \"value\": \"Basic\" }, \"tags\": { \"value\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } } } } . Command line . PowerShell . New-AzResourceGroupDeployment -Name &lt;deployment-name&gt; -ResourceGroupName &lt;resource-group-name&gt; -TemplateFile &lt;path-to-template&gt; -TemplateParameterFile &lt;path-to-templateparameter&gt; . Azure CLI . az group deployment create --name &lt;deployment-name&gt; --resource-group &lt;resource-group-name&gt; --template-file &lt;path-to-template&gt; --parameters @&lt;path-to-templateparameterfile&gt; . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/acr/acr_v1/#snippets",
    "relUrl": "/docs/templates/acr/acr_v1/#snippets"
  },"3": {
    "doc": "v1",
    "title": "v1",
    "content": " ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/acr/acr_v1/",
    "relUrl": "/docs/templates/acr/acr_v1/"
  },"4": {
    "doc": "Storage Account",
    "title": "Storage Account",
    "content": " ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/",
    "relUrl": "/docs/templates/storage/"
  },"5": {
    "doc": "Container Registry",
    "title": "Container Registry",
    "content": " ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/acr/",
    "relUrl": "/docs/templates/acr/"
  },"6": {
    "doc": "Home",
    "title": "Git it done",
    "content": "Focus on building great solutions on Azure instead of writing documentation. PSDocs for Azure automatically generates documentation for Azure infrastructure as code (IaC) artifacts. Get started now View it on GitHub . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/#git-it-done",
    "relUrl": "/#git-it-done"
  },"7": {
    "doc": "Home",
    "title": "Getting started",
    "content": "Annotate templates file . In its simplest structure, an Azure template has the following elements: . { \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\", \"contentVersion\": \"1.0.0.0\", \"parameters\": { }, \"variables\": { }, \"functions\": [ ], \"resources\": [ ], \"outputs\": { } } . Additionally a metadata property can be added in most places throughout the template. For example: . { \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"name\": \"Storage Account\", \"description\": \"Create or update a Storage Account.\" }, \"parameters\": { \"storageAccountName\": { \"type\": \"string\", \"metadata\": { \"description\": \"Required. The name of the Storage Account.\" } }, \"tags\": { \"type\": \"object\", \"defaultValue\": { }, \"metadata\": { \"description\": \"Optional. Tags to apply to the resource.\", \"example\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } } } }, \"resources\": [ ], \"outputs\": { \"resourceId\": { \"type\": \"string\", \"value\": \"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]\", \"metadata\": { \"description\": \"A unique resource identifier for the storage account.\" } } } } . PSDocs interprets the template structure and metadata to generate documentation as markdown. Generating documentation as markdown allows you to publish web-based content on a variety of platforms. PSDocs supports the following metadata: . | Field | Scope | Type | Description | . | name | Template | string | Used for markdown page title. | . | description | Template | string | Used as the top description for the markdown page. | . | description | Parameter | string | Used as the description for the parameter. | . | example | Parameter | string, boolean, object, or array | An example use of the parameter. The example is included in the JSON snippet. If an example is not included the default value is used instead. | . | ignore | Parameter | boolean | When true the parameter is not included in the JSON snippet. | . | description | Output | string | Used as the description for the output. | . Using with GitHub Actions . The following example shows how to setup GitHub Actions to copy generated markdown files to an Azure blob storage account. | See Creating a workflow file to create an empty workflow file. | Add a PowerShell step to: . | Install PSDocs.Azure module. | Scan for Azure template file recursively in the templates/ directory. | Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md | Generate the markdown to a specific directory. | . | Set the STORAGEACCOUNTSECRET action secret. | Use an Azure Blob Storage Upload action to copy the generated markdown to an Azure Storage Blob container. | . For example: . # Example: .github/workflows/arm-docs.yaml name: Generate ARM templates docs on: push: branches: [ main ] jobs: arm_docs: name: Generate ARM template docs runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 # STEP 1: Generate Markdowns using PSDocs - name: Generate ARM markdowns run: | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -force; # Scan for Azure template file recursively in the templates/ directory Get-AzDocTemplateFile -Path templates/ | ForEach-Object { # Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md $template = Get-Item -Path $_.TemplateFile; $templateName = $template.Directory.Parent.Name; $version = $template.Directory.Name; $docName = \"$($templateName)_$version\"; # Generate markdown Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName; } shell: pwsh # STEP 2: Copy files to a storage account - name: Copy files to a storage account uses: bacongobbler/azure-blob-storage-upload@v1.1.1 with: connection_string: $ container_name: ps-docs source_dir: 'out/docs/*' . Using with Azure Pipelines . The following example shows how to setup Azure Pipelines to generate ARM template documentation in the markdown format. This example copies the generated markdown files to a designated blob storage. | Create a new YAML pipeline with the Starter pipeline template. | Add a PowerShell task to: . | Install PSDocs.Azure module. | Scan for Azure template file recursively in the templates/ directory. | Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md | Generate the markdown to a specific directory. | . | Add an AzureFileCopy task to copy the generated markdown to an Azure Storage Blob container. | . For example: . # Example: .azure-pipelines/psdocs-blobstorage.yaml jobs: - job: 'generate_arm_template_documentation' displayName: 'Generate ARM template docs' pool: vmImage: 'windows-2019' steps: # STEP 1: Generate Markdowns using PSDocs - powershell: | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -force; # Scan for Azure template file recursively in the templates/ directory Get-AzDocTemplateFile -Path templates/ | ForEach-Object { # Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md $template = Get-Item -Path $_.TemplateFile; $templateName = $template.Directory.Parent.Name; $version = $template.Directory.Name; $docName = \"$($templateName)_$version\"; # Generate markdown Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName; } displayName: 'Export template data' # STEP 2: Copy files to a storage account - task: AzureFileCopy@4 displayName: 'Copy files to a storage account blob container' inputs: SourcePath: 'out/docs/*' azureSubscription: 'psdocstest' Destination: 'AzureBlob' storage: '&lt;storageaccountname&gt;' ContainerName: 'ps-docs' . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/#getting-started",
    "relUrl": "/#getting-started"
  },"8": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/",
    "relUrl": "/"
  },"9": {
    "doc": "v1",
    "title": "Storage Account",
    "content": ". Create or update a Storage Account. ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v1/#storage-account",
    "relUrl": "/docs/templates/storage/storage_v1/#storage-account"
  },"10": {
    "doc": "v1",
    "title": "Parameters",
    "content": "| Parameter name | Description | . | storageAccountName | Required. The name of the Storage Account. | . | location | Optional. The Azure region to deploy to. | . | sku | Optional. Crease the Storage Account as LRS or GRS. | . | tags | Optional. Tags to apply to the resource. | . | containers | Optional. An array of storage containers to create on the storage account. | . | lifecycleRules | Optional. An array of lifecycle management policies for the storage account. | . | softDeleteDays | Optional. The number of days to retain deleted blobs. When set to 0, soft delete is disabled. | . storageAccountName . Required. The name of the Storage Account. location . Optional. The Azure region to deploy to. | Default value: [resourceGroup().location] | . sku . Optional. Crease the Storage Account as LRS or GRS. | Default value: Standard_LRS . | Allowed values: Standard_LRS, Standard_GRS . | . tags . Optional. Tags to apply to the resource. containers . Optional. An array of storage containers to create on the storage account. lifecycleRules . Optional. An array of lifecycle management policies for the storage account. softDeleteDays . Optional. The number of days to retain deleted blobs. When set to 0, soft delete is disabled. | Default value: 0 | . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v1/#parameters",
    "relUrl": "/docs/templates/storage/storage_v1/#parameters"
  },"11": {
    "doc": "v1",
    "title": "Outputs",
    "content": "| Name | Type | Description | . | resourceId | string | A unique resource identifier for the storage account. | . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v1/#outputs",
    "relUrl": "/docs/templates/storage/storage_v1/#outputs"
  },"12": {
    "doc": "v1",
    "title": "Snippets",
    "content": "Parameter file . { \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"template\": \"templates/storage/v1/template.json\" }, \"parameters\": { \"storageAccountName\": { \"value\": \"&lt;name&gt;\" }, \"sku\": { \"value\": \"Standard_LRS\" }, \"tags\": { \"value\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } }, \"containers\": { \"value\": [] }, \"lifecycleRules\": { \"value\": [] }, \"softDeleteDays\": { \"value\": 7 } } } . Command line . PowerShell . New-AzResourceGroupDeployment -Name &lt;deployment-name&gt; -ResourceGroupName &lt;resource-group-name&gt; -TemplateFile &lt;path-to-template&gt; -TemplateParameterFile &lt;path-to-templateparameter&gt; . Azure CLI . az group deployment create --name &lt;deployment-name&gt; --resource-group &lt;resource-group-name&gt; --template-file &lt;path-to-template&gt; --parameters @&lt;path-to-templateparameterfile&gt; . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v1/#snippets",
    "relUrl": "/docs/templates/storage/storage_v1/#snippets"
  },"13": {
    "doc": "v1",
    "title": "v1",
    "content": " ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v1/",
    "relUrl": "/docs/templates/storage/storage_v1/"
  },"14": {
    "doc": "v2",
    "title": "Storage Account",
    "content": ". Create or update a Storage Account. ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v2/#storage-account",
    "relUrl": "/docs/templates/storage/storage_v2/#storage-account"
  },"15": {
    "doc": "v2",
    "title": "Parameters",
    "content": "| Parameter name | Description | . | storageAccountName | Required. The name of the Storage Account. | . | location | Optional. The Azure region to deploy to. | . | sku | Optional. Crease the Storage Account as LRS or GRS. | . | suffixLength | Optional. Determine how many additional characters are added to the storage account name as a suffix. | . | containers | Optional. An array of storage containers to create on the storage account. | . | lifecycleRules | Optional. An array of lifecycle management policies for the storage account. | . | blobSoftDeleteDays | Optional. The number of days to retain deleted blobs. When set to 0, soft delete is disabled. | . | containerSoftDeleteDays | Optional. The number of days to retain deleted containers. When set to 0, soft delete is disabled. | . | shares | Optional. An array of file shares to create on the storage account. | . | useLargeFileShares | Optional. Determines if large file shares are enabled. This can not be disabled once enabled. | . | shareSoftDeleteDays | Optional. The number of days to retain deleted shares. When set to 0, soft delete is disabled. | . | allowBlobPublicAccess | Optional. Determines if any containers can be configured with the anonymous access types of blob or container. | . | keyVaultPrincipalId | Optional. Set to the objectId of Azure Key Vault to delegated permission for use with Key Managed Storage Accounts. | . | tags | Optional. Tags to apply to the resource. | . storageAccountName . Required. The name of the Storage Account. location . Optional. The Azure region to deploy to. | Default value: [resourceGroup().location] | . sku . Optional. Crease the Storage Account as LRS or GRS. | Default value: Standard_LRS . | Allowed values: Standard_LRS, Standard_GRS . | . suffixLength . Optional. Determine how many additional characters are added to the storage account name as a suffix. | Default value: 0 | . containers . Optional. An array of storage containers to create on the storage account. lifecycleRules . Optional. An array of lifecycle management policies for the storage account. blobSoftDeleteDays . Optional. The number of days to retain deleted blobs. When set to 0, soft delete is disabled. | Default value: 0 | . containerSoftDeleteDays . Optional. The number of days to retain deleted containers. When set to 0, soft delete is disabled. | Default value: 0 | . shares . Optional. An array of file shares to create on the storage account. useLargeFileShares . Optional. Determines if large file shares are enabled. This can not be disabled once enabled. | Default value: False | . shareSoftDeleteDays . Optional. The number of days to retain deleted shares. When set to 0, soft delete is disabled. | Default value: 0 | . allowBlobPublicAccess . Optional. Determines if any containers can be configured with the anonymous access types of blob or container. | Default value: False | . keyVaultPrincipalId . Optional. Set to the objectId of Azure Key Vault to delegated permission for use with Key Managed Storage Accounts. tags . Optional. Tags to apply to the resource. ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v2/#parameters",
    "relUrl": "/docs/templates/storage/storage_v2/#parameters"
  },"16": {
    "doc": "v2",
    "title": "Outputs",
    "content": "| Name | Type | Description | . | resourceId | string | A unique resource identifier for the storage account. | . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v2/#outputs",
    "relUrl": "/docs/templates/storage/storage_v2/#outputs"
  },"17": {
    "doc": "v2",
    "title": "Snippets",
    "content": "Parameter file . { \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"template\": \"templates/storage/v2/template.json\" }, \"parameters\": { \"storageAccountName\": { \"value\": \"&lt;name&gt;\" }, \"sku\": { \"value\": \"Standard_LRS\" }, \"containers\": { \"value\": [ { \"name\": \"logs\", \"publicAccess\": \"None\", \"metadata\": {} } ] }, \"lifecycleRules\": { \"value\": { \"enabled\": true, \"name\": \"&lt;rule_name&gt;\", \"type\": \"Lifecycle\", \"definition\": { \"actions\": { \"baseBlob\": { \"delete\": { \"daysAfterModificationGreaterThan\": 7 } } }, \"filters\": { \"blobTypes\": [ \"blockBlob\" ], \"prefixMatch\": [ \"logs/\" ] } } } }, \"blobSoftDeleteDays\": { \"value\": 7 }, \"containerSoftDeleteDays\": { \"value\": 7 }, \"shares\": { \"value\": [ { \"name\": \"&lt;share_name&gt;\", \"shareQuota\": 5, \"metadata\": {} } ] }, \"shareSoftDeleteDays\": { \"value\": 7 }, \"allowBlobPublicAccess\": { \"value\": false }, \"tags\": { \"value\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } } } } . Command line . PowerShell . New-AzResourceGroupDeployment -Name &lt;deployment-name&gt; -ResourceGroupName &lt;resource-group-name&gt; -TemplateFile &lt;path-to-template&gt; -TemplateParameterFile &lt;path-to-templateparameter&gt; . Azure CLI . az group deployment create --name &lt;deployment-name&gt; --resource-group &lt;resource-group-name&gt; --template-file &lt;path-to-template&gt; --parameters @&lt;path-to-templateparameterfile&gt; . ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v2/#snippets",
    "relUrl": "/docs/templates/storage/storage_v2/#snippets"
  },"18": {
    "doc": "v2",
    "title": "v2",
    "content": " ",
    "url": "https://berniewhite.github.io/PSDocs.Azure-sample/docs/templates/storage/storage_v2/",
    "relUrl": "/docs/templates/storage/storage_v2/"
  }
}
